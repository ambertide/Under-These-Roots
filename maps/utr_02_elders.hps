void OnStart()
{
    AddEntityCollideCallback("Player", "PlayerPassOut_1", "PlayerPass", true, 0);
    AddEntityCollideCallback("Player", "PlayerPassOut_2", "PlayerPass", true, 0);
    AddEntityCollideCallback("Player", "MapChange", "PlayerPass", true, 0);
	AddEntityCollideCallback("Player", "PlayerMonsterPass", "PlayerPass", false, 1);
	AddEntityCollideCallback("Player", "CrouchArea", "PlayerPass", false, 1);
	AddEntityCollideCallback("Player", "CrouchArea", "PlayerPass", false, 1);
    AddEntityCollideCallback("Player", "Hint_Area", "PlayerPass", true, 0);
	AddUseItemCallback("key_open_prison", "key_tomb_rusty_1", "prison_1", "ItemUse", true);
    SetEntityCallbackFunc("lantern_1", "EntityCallback");
}

void EntityCallback(string &in asEntity, string &in asType) {
    if (asEntity == "lantern_1") {
        if (type == "OnPickup") {
            SetLightVisible("lantern_light", false);
        }
    }
}

void ItemUse(string &in asItem, string &in asEntity) {
	if (asEntity == "prison_1") {
		SetSwingDoorLocked("prison_1", false, true);
	}
}

void PlayerPass(string &in asParent, string &in asChild, int alState) {
    if (asChild == "PlayerPassOut_1") {
        SetPlayerActive(false);
        GivePlayerDamage(25.0f, "BlodSplat", false, false);
        FadePlayerRollTo(40.0f, 15.0f, 30.0f);
        FadeOut(0.5f);
        PlaySoundAtEntity("", "player_falldamage_med.snt", "Player", 0, false);
        SetLocalVarInt("playerDragged", 1);
        AddTimer("FirstPass", 3.0f, "TimerDependant");
        StopMusic(0.01f, 0);
        PlayMusic("18_amb.ogg", true, 0.5f, 0.9f, 1, false);
    } else if (asChild == "PlayerPassOut_2") {
        SetLocalVarInt("playerDragged", 0);
        AddTimer("SecondPass", 0, "TimerDependant");
    } else if (asChild == "MapChange") {
        ChangeMap("utr_03_forest", "PlayerStartArea_1", "", "");
    } else if (asChild == "PlayerMonsterPass") {
		if (HasItem("key_tomb_rusty_1")) {
			RemoveEntityCollideCallback("Player", "PlayerMonsterPass");
			StopMusic(1.0f, 0);
			AddTimer("Other_Enabled", 1.0f, "TimerDependant");
		}
	} else if (asChild == "CrouchArea") {
	    if (alState == -1) {
	        SetPlayerCrouching(false);
	    } else {
	        SetPlayerCrouching(true);
	    }
	} else if (asChild == "Hint_Area") {
	    GiveHint ("hint_can_see", "Hints", "utr_02_can_see_you", -1);
	}
}

void TimerDependant(string &in asTimer) {
    if (asTimer == "FirstPass") {
        //Play lock opening and dragging sounds
        TeleportPlayer("PlayerStartArea_2");
        FadeIn(3.0f);
        AddTimer("Dragged", 3.0f, "TimerDependant");
    } else if (asTimer == "Dragged") {
        AddTimer("ItelePlayer", 0, "TimerDependant");
    } else if (asTimer == "ItelePlayer") {
        if (GetLocalVarInt("playerDragged") == 1) {
            AddTimer("ItelePlayer", 0, "TimerDependant");
            MovePlayerForward(-0.5);
        } else {
            SetPlayerActive(true);
            // Some random voices
        }
    } else if (asTimer == "SecondPass") {
        FadeOut(1.0f);
        AddTimer("TeleportPlayerDuringSecondPass", 1.0f, "TimerDependant");
    } else if (asTimer == "TeleportPlayerDuringSecondPass") {
        TeleportPlayer("PlayerStartArea_3");
        AddTimer("PlayerReturnNormal", 1.0f, "TimerDependant");
    } else if (asTimer == "PlayerReturnNormal") {
        FadeIn(1.0f);
        FadePlayerRollTo(0, 100.0f, 100.0f);
    } else if (asTimer == "Other_Enabled") {
        FadePlayerFOVMulTo(0.9f, 1.0f);
        StartScreenShake(0.005f, 6.0f, 0.5f, 0.5f);
        SetLanternActive(false, false);
		PlayMusic("utr_02_post_monster.ogg", true, 0.5f, 0.9f, 1, false);
		PlaySoundAtEntity("", "other_enabled.snt", "prison_section_silent_1", 0, false);
		AddTimer("HumanScream", 1.5f, "TimerDependant");
	} else if (asTimer == "HumanScream") {
	    PlaySoundAtEntity("", "29_scream.snt", "prison_section_silent_1", 0, false);
	    AddTimer("GrateRipped", 0.5f, "TimerDependant");
	} else if (asTimer == "GrateRipped") {
	    PlaySoundAtEntity("", "15_ripp_door.snt", "prison_section_silent_1", 0, false);
	    StopCurrentInsanityEvent();
	    FadePlayerFOVMulTo(1.1f, 1.0f);
        AddTimer("NormaliseScream", 2.0f, "TimerDependant");
	} else if (asTimer == "NormaliseScream") {
	    FadePlayerFOVMulTo(1.0f, 1.0f);
	}
}
